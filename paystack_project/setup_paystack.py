#!/usr/bin/env python3
"""
Setup script for Paystack configuration
This script helps you set up your Paystack API keys and test the connection
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create .env file with Paystack configuration"""
    env_file = Path('.env')
    
    if env_file.exists():
        print("⚠️  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ")
        if response.lower() != 'y':
            print("❌ Setup cancelled")
            return False
    
    print("\n🔧 Setting up Paystack Environment Variables")
    print("=" * 50)
    
    # Get Paystack keys from user
    print("\n📝 Enter your Paystack API keys:")
    print("You can get these from: https://dashboard.paystack.com/#/settings/developer")
    print()
    
    public_key = input("Paystack Public Key (pk_test_... or pk_live_...): ").strip()
    secret_key = input("Paystack Secret Key (sk_test_... or sk_live_...): ").strip()
    
    if not public_key or not secret_key:
        print("❌ Both public and secret keys are required!")
        return False
    
    # Create .env content
    env_content = f"""# Django Backend Environment Variables
# Generated by setup_paystack.py

# Django Settings
SECRET_KEY=django-insecure-{os.urandom(32).hex()}
DEBUG=True

# Database (for local development)
DATABASE_URL=sqlite:///db.sqlite3

# Paystack Configuration
PAYSTACK_PUBLIC_KEY={public_key}
PAYSTACK_SECRET_KEY={secret_key}
PAYSTACK_WEBHOOK_SECRET=

# CORS Settings
CORS_ALLOWED_ORIGINS=http://localhost:5173,http://127.0.0.1:5173

# Frontend URL
FRONTEND_URL=http://localhost:5173
"""
    
    # Write .env file
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    print(f"\n✅ Created {env_file}")
    print("🔐 Your Paystack keys have been saved to .env file")
    return True

def test_paystack_connection():
    """Test Paystack API connection"""
    print("\n🧪 Testing Paystack Connection")
    print("=" * 30)
    
    try:
        import requests
        
        # Load environment variables
        from decouple import config
        secret_key = config('PAYSTACK_SECRET_KEY')
        
        if not secret_key:
            print("❌ PAYSTACK_SECRET_KEY not found in environment")
            return False
        
        # Test API connection
        headers = {
            'Authorization': f'Bearer {secret_key}',
            'Content-Type': 'application/json'
        }
        
        response = requests.get('https://api.paystack.co/transaction', headers=headers)
        
        if response.status_code == 200:
            print("✅ Paystack API connection successful!")
            data = response.json()
            print(f"📊 API Status: {data.get('status', 'Unknown')}")
            return True
        else:
            print(f"❌ Paystack API connection failed: {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except ImportError:
        print("❌ requests library not installed. Install with: pip install requests")
        return False
    except Exception as e:
        print(f"❌ Error testing connection: {e}")
        return False

def main():
    print("🚀 Paystack Setup Script")
    print("=" * 30)
    
    # Check if we're in the right directory
    if not Path('manage.py').exists():
        print("❌ Please run this script from the Django project directory")
        print("   (where manage.py is located)")
        sys.exit(1)
    
    # Create .env file
    if not create_env_file():
        sys.exit(1)
    
    # Test connection
    if test_paystack_connection():
        print("\n🎉 Setup completed successfully!")
        print("\n📋 Next steps:")
        print("1. Start your Django server: python3 manage.py runserver")
        print("2. Test the API at: http://localhost:8000/api/payments/")
        print("3. Start your frontend: cd ../../PayStack && npm run dev")
    else:
        print("\n⚠️  Setup completed but Paystack connection failed.")
        print("Please check your API keys and try again.")

if __name__ == '__main__':
    main() 